% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/undupe.R
\name{undupe}
\alias{undupe}
\title{Unduplicate a dataframe based on selected variables}
\usage{
undupe(df, visible_var = NULL, invisible_var = NULL, prefix = "dupe")
}
\arguments{
\item{df}{A dataframe.}

\item{visible_var}{A character vector of variable names from \code{df} whose values must match for rows to be considered duplicates.}

\item{invisible_var}{A character vector of variable names from \code{df} whose values will be ignored during deduplication. All other variables in \code{df} will be visible during deduplication.}

\item{prefix}{A string to add as a prefix to the new variable names, ending \code{"_id"} and \code{"_order"}. Defaults to \code{"dupe"}, creating \code{dupe_id} and \code{dupe_order}.}
}
\value{
A list containing three dataframes:
\itemize{
\item \code{df_full}: The original dataframe, \code{df}, with the duplicate ID variable added.
\item \code{df_distinct}: The deduplicated dataframe, which contains only distinct rows from \code{df} according to the selected variables.
\item \code{df_dupesets}: A dataframe of grouped duplicate sets from \code{df}, with each set consisting of the duplicate retained in \code{df_distinct} and the duplicate(s) removed. Rows in \code{df} without duplicates are not included.
}
}
\description{
\code{undupe()} identifies duplicate rows in a dataframe based on a set of variables provided in the arguments. Duplicates are rows that have identical values across this set of variables. All other variables in the dataframe are ignored. \code{undupe()} returns both a dataframe of distinct rows and a dataframe of duplicates grouped together for easy visual comparison (dupesets).
}
\details{
When deduplicating a dataframe, one set of variables is "visible" to the process. If rows share identical values across this set of variables, they are considered duplicates. The remaining variables are "invisible" to the deduplication process. Their values are unconstrained within dupesets, therefore a dupeset can have conflicting values within one or more of these invisible variables.

\code{undupe()} allows two methods of setting the visible and invisible variables:
\itemize{
\item In \code{visible_var}, provide the names of variables whose values must match to be evaluated as duplicates.
\item In \code{invisible_var}, provide the names of variables to ignore, in which case all other variables in df become visible during deduplication.
}

Only one of these arguments may be used.

\code{undupe()} adds an identifier in \code{dupe_id} to each row based on the unique values in the varibles provided in \code{visible_var}. It also adds an integer in \code{dupe_order} which sequentially numbers each member of a dupeset.

To produce \code{df_distinct}, \code{undupe()} uses \code{\link[dplyr:distinct]{dplyr::distinct()}}, which returns the first of a set of distinct/unique rows (dupesets) in a dataframe.
}
\examples{
n_rows <- 20
df <- data.frame(
  x = sample(c("cat", "horse", "howler monkey"), size = n_rows, replace = TRUE),
  y = sample(c(1, 10, 100, NA), size = n_rows, replace = TRUE),
  z = sample(c("banana", "carrot", "pickle"), size = n_rows, replace = TRUE)
)
undupe_list <- undupe(df, visible_var = c("x", "y"))

}
\seealso{
Other undupe functions: 
\code{\link{count_conflicts}()},
\code{\link{flatten_conflicts}()},
\code{\link{isolate_conflicts}()}
}
\concept{undupe functions}
