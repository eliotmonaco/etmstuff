% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/isolate_conflicts.R
\name{isolate_conflicts}
\alias{isolate_conflicts}
\title{Focus on dupesets with conflicting values in selected variables}
\usage{
isolate_conflicts(
  df,
  var,
  dupe_id = "dupe_id",
  ignore_empty = TRUE,
  silent = FALSE
)
}
\arguments{
\item{df}{A dataframe of dupesets returned by \code{\link[=undupe]{undupe()}}.}

\item{var}{A character vector of variable names in \code{df}.}

\item{dupe_id}{The variable name for the ID that groups all members of a duplicate set, created by \code{\link[=undupe]{undupe()}}. Defaults to \code{"dupe_id"}.}

\item{ignore_empty}{Logical: omit blank strings and \code{NA}s when finding conflicts if \code{TRUE}.}

\item{silent}{Logical: silence progress indicator if \code{TRUE}.}
}
\value{
A dataframe.
}
\description{
\code{isolate_conflicts()} produces a dataframe that keeps only those dupesets that have conflicting values in the variables named in \code{var}. This makes it easier to visually inspect the data and look for patterns among dupesets.
}
\section{Deduplication}{

Deduplication is the process of reducing a dataframe to distinct rows only. Rows that have identical values across a set of selected variables are considered duplicates. These selected variables are "visible" to the process of deduplication. All other variables in the dataframe are "invisible" to deduplication, so they are ignored. Within dupesets, variables that were invisible to deduplication can have conflicting values.

The \code{\link[=undupe]{undupe()}} function produces both a deduplicated dataframe and a dataframe of all duplicate rows (dupesets) pulled from the original dataframe.

For a more detailed explanation of deduplication, see the \code{\link[=undupe]{undupe()}} documentation.
}

\examples{
n_rows <- 20
df <- data.frame(
  x = sample(c("cat", "horse", "howler monkey"), size = n_rows, replace = TRUE),
  y = sample(c(1, 10, 100, NA), size = n_rows, replace = TRUE),
  z = sample(c("banana", "carrot", "pickle"), size = n_rows, replace = TRUE)
)
undp <- undupe(df, visible_var = c("x", "y"))
df_isolated <- isolate_conflicts(undp[["df_dupesets"]], var = "z")

}
\seealso{
Other undupe functions: 
\code{\link{count_conflicts}()},
\code{\link{flatten_conflicts}()},
\code{\link{undupe}()}
}
\concept{undupe functions}
