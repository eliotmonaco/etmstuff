% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_address.R
\name{clean_address}
\alias{clean_address}
\title{Clean dirty addresses}
\usage{
clean_address(df, type, var = "street", row_id = "address_id")
}
\arguments{
\item{df}{A dataframe of addresses.}

\item{type}{The type of cleaning to perform. One of \code{c("digit_letter", "dir_street", "emb_punct", "extract_unit", "fractional", "no_letters", "no_spaces", "nondigit", "nonres", "nth", "num_dir1", "num_dir2", "num_sign", "num_word", "phone", "pobox", "rep_letter", "rep_segment", "six_words", "symbol", "unknown")}.}

\item{var}{The variable to target for cleaning. Defaults to \code{street}.}

\item{row_id}{A unique row identifier variable in \code{df}. Defaults to \code{address_id}.}
}
\value{
A dataframe consisting of rows where matches were found in \code{var}.
}
\description{
This function cleans address strings by using regular expressions to match common error patterns.
}
\details{
Each \code{type} option corresponds to a row in \code{etmstuff::address_regex} with patterns to clean a specific type of error found in address strings. The function returns a dataframe with two new variables, \code{REMOVED_TEXT} (the part of the string matching the error pattern) and \code{REPLACEMENT_TEXT} (a replacement suggestion for the entire string). These new columns are placed to the right of \code{var}. Only rows in which a pattern match is found will be returned. The user should examine the returned dataframe to confirm, reject, or modify the suggested replacements. \code{\link[=replace_values]{replace_values()}} can then be used to replace the values with errors in the original dataframe.
}
\section{Address validation workflow}{

The address validation workflow prepares addresses for validation by the Melissa Data Personator Consumer Web Service.
\enumerate{
\item Prepare addresses
\itemize{
\item \code{\link[=pull_addresses]{pull_addresses()}}
}
\item Clean addresses
\itemize{
\item \code{\link[=validate_address]{validate_address()}}
\item \code{\link[=clean_address]{clean_address()}}
\item \code{\link[=replace_values]{replace_values()}}
}
\item Validate/geocode addresses
\itemize{
\item \code{\link[=build_md_url]{build_md_url()}}
\item \code{\link[=send_md_request]{send_md_request()}}
}
\item Review results
\itemize{
\item \code{\link[=md_results_table]{md_results_table()}}
}
}
}

\section{Melissa Data}{

To use the Check action to validate and correct addresses, Melissa Data requires, at minimum, one of the follow combinations of address fields:
\itemize{
\item \code{street}, \code{city}, and \code{state}
\item \code{street} and \code{zip}
}

For more information on constructing the request, see the \href{https://www.melissa.com/quickstart-guides/personator-consumer}{Personator Consumer Quick Start Guide} and the \href{https://wiki.melissadata.com/index.php?title=Personator_Consumer:Request}{Personator Consumer Request wiki page}. Additional information can be found at the \href{https://wiki.melissadata.com/index.php?title=Personator_Consumer}{Melissa Data wiki}.
}

\seealso{
Other address processing functions: 
\code{\link{build_md_url}()},
\code{\link{md_results_table}()},
\code{\link{pull_addresses}()},
\code{\link{replace_values}()},
\code{\link{send_md_request}()},
\code{\link{validate_address}()}
}
\concept{address processing functions}
